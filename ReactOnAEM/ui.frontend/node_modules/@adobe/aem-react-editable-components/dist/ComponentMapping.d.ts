import React, { ComponentType } from 'react';
import { ComponentMapping } from '@adobe/aem-spa-component-mapping';
import { EditConfig } from './components/EditableComponent';
import { ReloadableModelProperties } from './components/ModelProvider';
/**
 * Hold force reload state.
 */
export interface ReloadForceAble {
    cqForceReload?: boolean;
}
/**
 * Properties given to every component runtime by the SPA editor.
 */
export interface MappedComponentProperties extends ReloadForceAble {
    isInEditor: boolean;
    cqPath: string;
    appliedCssClassNames?: string;
    aemNoDecoration?: boolean;
}
/**
 * Makes a React component mappable to AEM resourceTypes by adding Model config and AEM editing capabilities to it.
 *
 * @param component React representation for the component
 * @param editConfig Configuration object for enabling the edition capabilities.
 * @param config Model configuration object.
 * @returns The resulting decorated Component
 */
declare const withMappable: <P extends MappedComponentProperties>(component: React.ComponentType<P>, editConfig?: EditConfig<P> | undefined, config?: ReloadableModelProperties | undefined) => React.ComponentType<P>;
/**
 * @private
 */
declare type MapperFunction<P extends MappedComponentProperties> = (component: ComponentType<P>, editConfig?: EditConfig<P>) => ComponentType<P>;
declare const MapTo: <P extends MappedComponentProperties>(resourceTypes: string | string[]) => MapperFunction<P>;
declare type MappingContextFunction<P extends MappedComponentProperties> = (props: P) => JSX.Element;
declare const ComponentMappingContext: React.Context<typeof ComponentMapping>;
declare function withComponentMappingContext<P extends MappedComponentProperties>(Component: React.ComponentType<P>): MappingContextFunction<P>;
export { ComponentMapping, MapTo, withMappable, ComponentMappingContext, withComponentMappingContext };
//# sourceMappingURL=ComponentMapping.d.ts.map