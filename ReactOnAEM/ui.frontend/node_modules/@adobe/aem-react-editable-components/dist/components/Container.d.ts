import { Model } from '@adobe/aem-spa-page-model-manager';
import React, { Component } from 'react';
import { ComponentMapping, MappedComponentProperties } from '../ComponentMapping';
import { PlaceHolderModel } from './ContainerPlaceholder';
export interface ContainerProperties extends MappedComponentProperties {
    componentMapping?: typeof ComponentMapping;
    cqItems: {
        [key: string]: Model;
    };
    cqItemsOrder: string[];
}
export interface ContainerState {
    componentMapping: typeof ComponentMapping;
}
export declare class Container<P extends ContainerProperties, S extends ContainerState> extends Component<P, S> {
    static defaultProps: {
        cqItems: {};
        cqItemsOrder: never[];
        cqPath: string;
    };
    constructor(props: P);
    /**
     * Returns the child components of this Container.
     * It will instantiate the child components if mapping exists.
     *
     * @returns An array with the components instantiated to JSX
     */
    get childComponents(): JSX.Element[];
    /**
     * Connects a child component with the item data.
     *
     * @param ChildComponent
     * @param itemProps
     * @param itemKey
     * @returns The React element constructed by connecting the values of the input with the Component.
     */
    protected connectComponentWithItem(ChildComponent: React.ComponentType<MappedComponentProperties>, itemProps: any, itemKey: string): JSX.Element;
    /**
     * Returns the properties to add on a specific child component.
     *
     * @param item
     * @param itemKey
     * @param itemPath
     * @returns The map of properties.
     */
    getItemComponentProps(item: any, itemKey: string, itemPath: string): {
        [key: string]: string;
    };
    /**
     * Returns the path of given item.
     *
     * @param itemKey
     * @returns The computed path.
     */
    getItemPath(itemKey: string): string;
    /**
     * The properties for the root element of the container.
     *
     * @returns The map of properties.
     */
    get containerProps(): {
        [key: string]: string;
    };
    /**
     * The properties for the placeholder component in root element.
     *
     * @returns The map of properties to be added.
     */
    get placeholderProps(): PlaceHolderModel;
    get placeholderComponent(): JSX.Element | null;
    render(): JSX.Element;
}
//# sourceMappingURL=Container.d.ts.map