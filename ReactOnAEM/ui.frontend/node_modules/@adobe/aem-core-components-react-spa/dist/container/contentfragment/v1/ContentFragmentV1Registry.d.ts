import { ComponentType } from "react";
import { ContentFragmentV1Properties } from "./model";
export interface ContentFragmentV1Registry {
    mapRenderer: <T extends ContentFragmentV1Properties>(models: string | string[], component: ComponentType<T>) => void;
    getRenderer<T extends ContentFragmentV1Properties>(model: string): ComponentType<T>;
}
declare class ContentFragmentRegistryV1Impl implements ContentFragmentV1Registry {
    mapRenderer<T extends ContentFragmentV1Properties = ContentFragmentV1Properties>(resourceTypes: string | string[], clazz: ComponentType<T>): void;
    static mapRenderer<T extends ContentFragmentV1Properties = ContentFragmentV1Properties>(resourceTypes: string | string[], clazz: ComponentType<T>): void;
    getRenderer<T extends ContentFragmentV1Properties = ContentFragmentV1Properties>(model: string): ComponentType<T>;
    static getRenderer<T extends ContentFragmentV1Properties = ContentFragmentV1Properties>(model: string): ComponentType<T>;
    private static getModelKey;
}
declare const _default: ContentFragmentRegistryV1Impl;
export default _default;
export declare const MapToContentFragmentModel: <T extends ContentFragmentV1Properties = ContentFragmentV1Properties>(models: string | string[]) => (clazz: ComponentType<T>) => void;
//# sourceMappingURL=ContentFragmentV1Registry.d.ts.map