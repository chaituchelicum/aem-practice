{"ast":null,"code":"/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */\nexport function removeElement(elem) {\n  if (elem.prev) elem.prev.next = elem.next;\n  if (elem.next) elem.next.prev = elem.prev;\n  if (elem.parent) {\n    const childs = elem.parent.children;\n    const childsIndex = childs.lastIndexOf(elem);\n    if (childsIndex >= 0) {\n      childs.splice(childsIndex, 1);\n    }\n  }\n  elem.next = null;\n  elem.prev = null;\n  elem.parent = null;\n}\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */\nexport function replaceElement(elem, replacement) {\n  const prev = replacement.prev = elem.prev;\n  if (prev) {\n    prev.next = replacement;\n  }\n  const next = replacement.next = elem.next;\n  if (next) {\n    next.prev = replacement;\n  }\n  const parent = replacement.parent = elem.parent;\n  if (parent) {\n    const childs = parent.children;\n    childs[childs.lastIndexOf(elem)] = replacement;\n    elem.parent = null;\n  }\n}\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param parent The element to append to.\n * @param child The element to be added as a child.\n */\nexport function appendChild(parent, child) {\n  removeElement(child);\n  child.next = null;\n  child.parent = parent;\n  if (parent.children.push(child) > 1) {\n    const sibling = parent.children[parent.children.length - 2];\n    sibling.next = child;\n    child.prev = sibling;\n  } else {\n    child.prev = null;\n  }\n}\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */\nexport function append(elem, next) {\n  removeElement(next);\n  const {\n    parent\n  } = elem;\n  const currNext = elem.next;\n  next.next = currNext;\n  next.prev = elem;\n  elem.next = next;\n  next.parent = parent;\n  if (currNext) {\n    currNext.prev = next;\n    if (parent) {\n      const childs = parent.children;\n      childs.splice(childs.lastIndexOf(currNext), 0, next);\n    }\n  } else if (parent) {\n    parent.children.push(next);\n  }\n}\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param parent The element to prepend before.\n * @param child The element to be added as a child.\n */\nexport function prependChild(parent, child) {\n  removeElement(child);\n  child.parent = parent;\n  child.prev = null;\n  if (parent.children.unshift(child) !== 1) {\n    const sibling = parent.children[1];\n    sibling.prev = child;\n    child.next = sibling;\n  } else {\n    child.next = null;\n  }\n}\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */\nexport function prepend(elem, prev) {\n  removeElement(prev);\n  const {\n    parent\n  } = elem;\n  if (parent) {\n    const childs = parent.children;\n    childs.splice(childs.indexOf(elem), 0, prev);\n  }\n  if (elem.prev) {\n    elem.prev.next = prev;\n  }\n  prev.parent = parent;\n  prev.prev = elem.prev;\n  prev.next = elem;\n  elem.prev = prev;\n}","map":{"version":3,"sources":["manipulation.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/96c989e159c98218958f375ea04210f2d1b43c0c/src/","sourcesContent":["/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */\nexport function removeElement(elem) {\n    if (elem.prev)\n        elem.prev.next = elem.next;\n    if (elem.next)\n        elem.next.prev = elem.prev;\n    if (elem.parent) {\n        const childs = elem.parent.children;\n        const childsIndex = childs.lastIndexOf(elem);\n        if (childsIndex >= 0) {\n            childs.splice(childsIndex, 1);\n        }\n    }\n    elem.next = null;\n    elem.prev = null;\n    elem.parent = null;\n}\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */\nexport function replaceElement(elem, replacement) {\n    const prev = (replacement.prev = elem.prev);\n    if (prev) {\n        prev.next = replacement;\n    }\n    const next = (replacement.next = elem.next);\n    if (next) {\n        next.prev = replacement;\n    }\n    const parent = (replacement.parent = elem.parent);\n    if (parent) {\n        const childs = parent.children;\n        childs[childs.lastIndexOf(elem)] = replacement;\n        elem.parent = null;\n    }\n}\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param parent The element to append to.\n * @param child The element to be added as a child.\n */\nexport function appendChild(parent, child) {\n    removeElement(child);\n    child.next = null;\n    child.parent = parent;\n    if (parent.children.push(child) > 1) {\n        const sibling = parent.children[parent.children.length - 2];\n        sibling.next = child;\n        child.prev = sibling;\n    }\n    else {\n        child.prev = null;\n    }\n}\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */\nexport function append(elem, next) {\n    removeElement(next);\n    const { parent } = elem;\n    const currNext = elem.next;\n    next.next = currNext;\n    next.prev = elem;\n    elem.next = next;\n    next.parent = parent;\n    if (currNext) {\n        currNext.prev = next;\n        if (parent) {\n            const childs = parent.children;\n            childs.splice(childs.lastIndexOf(currNext), 0, next);\n        }\n    }\n    else if (parent) {\n        parent.children.push(next);\n    }\n}\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param parent The element to prepend before.\n * @param child The element to be added as a child.\n */\nexport function prependChild(parent, child) {\n    removeElement(child);\n    child.parent = parent;\n    child.prev = null;\n    if (parent.children.unshift(child) !== 1) {\n        const sibling = parent.children[1];\n        sibling.prev = child;\n        child.next = sibling;\n    }\n    else {\n        child.next = null;\n    }\n}\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */\nexport function prepend(elem, prev) {\n    removeElement(prev);\n    const { parent } = elem;\n    if (parent) {\n        const childs = parent.children;\n        childs.splice(childs.indexOf(elem), 0, prev);\n    }\n    if (elem.prev) {\n        elem.prev.next = prev;\n    }\n    prev.parent = parent;\n    prev.prev = elem.prev;\n    prev.next = elem;\n    elem.prev = prev;\n}\n//# sourceMappingURL=manipulation.js.map"]},"metadata":{},"sourceType":"module"}