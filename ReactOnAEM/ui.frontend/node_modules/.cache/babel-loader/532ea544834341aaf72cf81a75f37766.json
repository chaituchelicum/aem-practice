{"ast":null,"code":"import { Parser } from \"./Parser.js\";\nexport { Parser } from \"./Parser.js\";\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler,\n// Old name for DomHandler\nDomHandler as DefaultHandler } from \"domhandler\";\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDomStream(callback, options, elementCallback) {\n  const handler = new DomHandler(callback, options, elementCallback);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nimport * as _ElementType from \"domelementtype\";\nexport { _ElementType as ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed } from \"domutils\";\nconst parseFeedDefaultOptions = {\n  xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parseFeedDefaultOptions;\n  return getFeed(parseDOM(feed, options));\n}\nimport * as _DomUtils from \"domutils\";\nexport { _DomUtils as DomUtils };","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,SAAS,MAAM,QAAuB,aAAa;AACnD,SAAS,MAAM,QAA4B,aAAa;AAExD,SACI,UAAU,QAKP,YAAY;AAEnB,SACI,UAAU;AACV;AACA,UAAU,IAAI,cAAc,QAEzB,YAAY;AAInB;AAEA;;;;;AAKG;AACH,OAAM,SAAU,aAAa,CAAC,IAAY,EAAE,OAAiB,EAAA;EACzD,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,OAAO,CAAC;EAClD,IAAI,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;EACtC,OAAO,OAAO,CAAC,IAAI;AACvB;AACA;;;;;;;;;AASG;AACH,OAAM,SAAU,QAAQ,CAAC,IAAY,EAAE,OAAiB,EAAA;EACpD,OAAO,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,QAAQ;AAChD;AACA;;;;;;AAMG;AACH,OAAM,SAAU,eAAe,CAC3B,QAAyD,EACzD,OAAiB,EACjB,eAA4C,EAAA;EAE5C,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,QAAQ,EAAE,OAAO,EAAE,eAAe,CAAC;EAClE,OAAO,IAAI,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC;AACvC;AAEA,SACI,OAAO,IAAI,SAAS,QAEjB,gBAAgB;AAEvB;;;AAGG;AAHH,YAAA,YAAA,MAI6B,gBAAgB;AAAA,SAAA,YAAA,IAAjC,WAAW;AAEvB,SAAS,OAAO,QAAc,UAAU;AAExC,SAAS,OAAO,QAAQ,UAAU;AAElC,MAAM,uBAAuB,GAAG;EAAE,OAAO,EAAE;AAAI,CAAE;AAEjD;;;;;AAKG;AACH,OAAM,SAAU,SAAS,CACrB,IAAY,EAC8B;EAAA,IAA1C,OAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAmB,uBAAuB;EAE1C,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3C;AAAC,YAAA,SAAA,MAEyB,UAAU;AAAA,SAAA,SAAA,IAAxB,QAAQ","sourceRoot":"https://raw.githubusercontent.com/fb55/htmlparser2/c123610e003a1eaebc61febed01cabb6e41eb658/src/","sourcesContent":["import { Parser } from \"./Parser.js\";\nexport { Parser } from \"./Parser.js\";\nimport { DomHandler, } from \"domhandler\";\nexport { DomHandler, \n// Old name for DomHandler\nDomHandler as DefaultHandler, } from \"domhandler\";\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nexport function parseDocument(data, options) {\n    const handler = new DomHandler(undefined, options);\n    new Parser(handler, options).end(data);\n    return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDomStream(callback, options, elementCallback) {\n    const handler = new DomHandler(callback, options, elementCallback);\n    return new Parser(handler, options);\n}\nexport { default as Tokenizer, } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nexport * as ElementType from \"domelementtype\";\nimport { getFeed } from \"domutils\";\nexport { getFeed } from \"domutils\";\nconst parseFeedDefaultOptions = { xmlMode: true };\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed, options = parseFeedDefaultOptions) {\n    return getFeed(parseDOM(feed, options));\n}\nexport * as DomUtils from \"domutils\";\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}